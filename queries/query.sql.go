// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getQuiz = `-- name: GetQuiz :many
SELECT
	quiz.ID,
	quiz.title,
	quiz.created_at,
	quiz.updated_at,
	quiz.status,
	ques.ID,
	ques.body,
	opt.ID,
	opt.body
FROM
	quizzes AS quiz
LEFT JOIN
	questions AS ques
ON
	quiz.ID = ques.quiz_id
LEFT JOIN
	options AS opt
ON
	ques.ID = opt.question_id
WHERE
	quiz.ID = $1
AND
	owner_id = $2
`

type GetQuizParams struct {
	ID      int32
	OwnerID int32
}

type GetQuizRow struct {
	ID        int32
	Title     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Status    QuizStatus
	ID_2      pgtype.Int4
	Body      pgtype.Text
	ID_3      pgtype.Int4
	Body_2    pgtype.Text
}

func (q *Queries) GetQuiz(ctx context.Context, arg GetQuizParams) ([]GetQuizRow, error) {
	rows, err := q.db.Query(ctx, getQuiz, arg.ID, arg.OwnerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuizRow
	for rows.Next() {
		var i GetQuizRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Status,
			&i.ID_2,
			&i.Body,
			&i.ID_3,
			&i.Body_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
